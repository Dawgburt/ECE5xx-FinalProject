/*
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 */

/*
 *
 *
 * This file is a generated sample test application.
 *
 * This application is intended to test and/or illustrate some
 * functionality of your system.  The contents of this file may
 * vary depending on the IP in your system and may use existing
 * IP driver functions.  These drivers will be generated in your
 * SDK application project when you run the "Generate Libraries" menu item.
 *
 */

#include <stdio.h>
#include "xparameters.h"
#include "xil_cache.h"
#include "uartlite_header.h"
#include "xuartlite.h"

#define UART_DEVICE_ID XPAR_UARTLITE_0_DEVICE_ID
#define BUFFER_SIZE 100

//Dummy variables for demonstration purposes
#define PIN 1234
#define ON 1
#define OFF 0

XUartLite UartLite;
u8 RecvBuffer[BUFFER_SIZE];
u8 SendBuffer[BUFFER_SIZE];

int main ()
{
   Xil_ICacheEnable();
   Xil_DCacheEnable();
   print("---Starting Smart Lock---\n\r");
      int status;

      // Initialize the UART Lite module
      status = XUartLite_Initialize(&UartLite, UART_DEVICE_ID);
      if (status != XST_SUCCESS) {
          xil_printf("UART Initialization Failed!\n\r");
          return XST_FAILURE;
      }
      xil_printf("UART Intialized...\n\r");
      xil_printf("Bluetooth Module detected...\n\r");

      while (1) {
          int ReceivedBytes = XUartLite_Recv(&UartLite, RecvBuffer, BUFFER_SIZE - 1);

          //Debug Display
          if (ReceivedBytes > 0) {
              RecvBuffer[ReceivedBytes] = '\0';
              xil_printf("Received: %s\n\r", RecvBuffer);
          }


          //wait for PIN
          if (ReceivedBytes == PIN){
        	  xil_printf("Pin Match Found! Opening Lock...\n\r");
        	  // Send message over Bluetooth
        	  SendBuffer[BUFFER_SIZE - 1] = "Match Found!";  // Message to send
        	  XUartLite_Send(&UartLite, SendBuffer, BUFFER_SIZE - 1);
        	  xil_printf("Message Sent: %s\n\r", SendBuffer);
        	  //usleep(1000);

        	  //Send PWM Control Signal to Servo JB[3]. Channel 1
        	  //XGpio_DiscreteWrite(&GpioPWM, 1, ON);
        	  //Send PWM Control Signal to LED JB[4]. Channel 2
        	  //XGpio_DiscreteWrite(&GpioPWM, 2, ON);
        	  //usleep(3000); //Turn lock and keep LED on for 3 seconds
        	  //Send PWM Control Signal to Servo JB[3]. Channel 1
        	  //XGpio_DiscreteWrite(&GpioPWM, 1, OFF);
        	  //Send PWM Control Signal to LED JB[4]. Channel 2
        	  //XGpio_DiscreteWrite(&GpioPWM, 2, OFF);

        	  // Send message over Bluetooth
        	  SendBuffer[] = "Lock Open!";  // Message to send
        	  XUartLite_Send(&UartLite, SendBuffer, BUFFER_SIZE - 1);
        	  xil_printf("Message Sent: %s\n\r", SendBuffer);

        	  xil_printf("Lock Open!\n\r");
          } else {
        	  xil_printf("Pin Mismatch! Try again..\n\r");
        	  //Toggle LED 3 times for "error state"
        	  //Send PWM Control Signal to LED JB[4]. Channel 2
        	  //XGpio_DiscreteWrite(&GpioPWM, 2, ON);
        	  //usleep(1000);
        	  //XGpio_DiscreteWrite(&GpioPWM, 2, OFF);
        	  //usleep(1000);
        	  //XGpio_DiscreteWrite(&GpioPWM, 2, ON);
        	  //usleep(1000);
        	  //XGpio_DiscreteWrite(&GpioPWM, 2, OFF);
        	  //usleep(1000);
        	  //XGpio_DiscreteWrite(&GpioPWM, 2, ON);
        	  //usleep(1000);
        	  //XGpio_DiscreteWrite(&GpioPWM, 2, OFF);
        	  //usleep(1000);
          }



      }

   print("---Exiting main---\n\r");
   Xil_DCacheDisable();
   Xil_ICacheDisable();
   return 0;

}
